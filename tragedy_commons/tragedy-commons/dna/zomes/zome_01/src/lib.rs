use hdk::prelude::*;
//use hdk::prelude::holo_hash::*;

//se importa el script
mod game_code;
mod player_profile;

//1*s
use crate::player_profile::{JoinGameInfo, PlayerProfile};

entry_defs![
     // Our implementation of game_code uses `anchor` helper method,
    // which requires us to add the Anchor and Path entry definitions
    Anchor::entry_def(),
    Path::entry_def(),
    // Our implementation of PlayerProfile. You wouldn't find a fn
    // named entry_def in player_profile.rs: this is one of the functions
    // generated by applying `#[hdk_entry]` macro to PlayerProfile struct
    player_profile::PlayerProfile::entry_def()
];

//funciones de game_code.rs

//esto es el wrapper -> se importa la función
#[hdk_extern]
pub fn create_game_code_anchor(short_unique_code: String) -> ExternResult<EntryHash> {

    game_code::create_game_code_anchor(short_unique_code)
}
//cada función...
/* #[hdk_extern]
pub fn get_game_code_anchor(game_code: String) -> ExternResult<EntryHash> {

    game_code::get_game_code_anchor(game_code)

} */

//funciones y structs de player_profile
//structs arriba en 1*

/* #[hdk_extern]
pub fn create_and_hash_entry_player_profile(nickname: String) -> ExternResult<EntryHash> {
    player_profile::create_and_hash_entry_player_profile(nickname)

}
 */

#[hdk_extern]
pub fn join_game_with_code (input: JoinGameInfo) -> ExternResult<EntryHash> {

    player_profile::join_game_with_code(input)

}

#[hdk_extern]
pub fn get_player_for_game_code(short_unique_code: String) -> ExternResult<Vec<PlayerProfile>> {
    player_profile::get_player_profile_for_game_code(short_unique_code)
}
