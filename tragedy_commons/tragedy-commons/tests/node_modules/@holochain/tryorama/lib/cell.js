"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = void 0;
const common_1 = require("./common");
/**
 * Make zome calls from Cells.
 * `cell.call('zomeName', 'funcName', params)`
 */
class Cell {
    constructor(o) {
        this.dnaHash = () => {
            return this.cellId[0];
        };
        this.call = (zome, fn, params) => __awaiter(this, void 0, void 0, function* () {
            if (typeof zome !== 'string' || typeof fn !== 'string') {
                throw new Error("cell.call() must take at least `zome` and `fn` args");
            }
            // FIXME: don't just use provenance from CellId that we're calling,
            //        (because this always grants Authorship)
            //        for now, it makes sense to use the AgentPubKey of the *caller*,
            //        but in the future, Holochain will inject the provenance itself
            //        and you won't even be able to pass it in here.
            const [_dnaHash, provenance] = this.cellId;
            return this._player.appWs(`cell.call()`).callZome({
                cell_id: this.cellId,
                zome_name: zome,
                cap: common_1.fakeCapSecret(),
                fn_name: fn,
                payload: params,
                provenance,
            });
        });
        this.stateDump = () => {
            return this._player.adminWs(`cell.stateDump()`).dumpState({ cell_id: this.cellId });
        };
        this.cellId = o.cellId;
        this.cellNick = o.cellNick;
        this._player = o.player;
    }
}
exports.Cell = Cell;
//# sourceMappingURL=cell.js.map