import { ScenarioApi } from "./api";
import { Conductor } from "./conductor";
import { Player } from "./player";
import { Cell } from './cell';
import { AgentPubKey, HoloHash, DnaSource as LocalDnaSource } from '@holochain/conductor-api';
export declare const decodeOrThrow: (validator: any, value: any, extraMsg?: string) => any;
export declare type ObjectN<V> = {
    [name: number]: V;
};
export declare type ObjectS<V> = {
    [name: string]: V;
};
export declare type SpawnConductorFn = (player: Player, args: any) => Promise<Conductor>;
export declare type ScenarioFn = (s: ScenarioApi) => Promise<void>;
export declare type IntermediateConfig = RawConductorConfig;
export declare type ConfigSeed = (args: ConfigSeedArgs) => IntermediateConfig;
export declare type PartialConfigSeedArgs = {
    adminInterfacePort: number;
    configDir: string;
};
export declare type CommonConfig = {
    network?: KitsuneP2pConfig;
    db_sync_level?: string;
    appPort?: number;
};
export declare type ConfigSeedArgs = PartialConfigSeedArgs & {
    scenarioName: string;
    playerName: string;
    uid: string;
};
export declare type PlayerConfig = ConfigSeed;
export declare type InstallAgentsHapps = InstallHapps[];
export declare type InstallHapps = InstallHapp[];
export declare type DnaSrc = DnaPath | HoloHash | DnaUrl;
export declare type InstallHapp = DnaSrc[];
export declare type DnaPath = string;
export declare type DnaUrl = {
    url: string;
};
export declare type DnaSource = LocalDnaSource | {
    url: string;
};
export declare type InstalledAgentHapps = InstalledHapps[];
export declare type InstalledHapps = InstalledHapp[];
export declare type InstalledHapp = {
    hAppId: string;
    agent: AgentPubKey;
    cells: Cell[];
};
export declare const adminWsUrl: ({ urlBase, port }: {
    urlBase: any;
    port: any;
}) => string;
export interface WsInterfaceConfig {
    driver: {
        type: string;
        port: number;
    };
}
export interface PassphraseServiceConfig {
    type: string;
    passphrase: string;
}
export interface RawConductorConfig {
    environment_path: string;
    passphrase_service: PassphraseServiceConfig;
    use_dangerous_test_keystore?: boolean;
    signing_service_uri?: string;
    encryption_service_uri?: string;
    decryption_service_uri?: string;
    keystore_path?: string;
    admin_interfaces?: WsInterfaceConfig[];
    app_interfaces?: WsInterfaceConfig[];
    db_sync_level?: string;
    network?: KitsuneP2pConfig;
}
export declare type Url2 = string;
export declare enum TransportConfigType {
    Mem = "mem",
    Quic = "quic",
    Proxy = "proxy"
}
export interface Mem {
    type: TransportConfigType;
}
export interface Quic {
    type: TransportConfigType;
    bind_to?: Url2;
    override_host?: string;
    override_port?: number;
}
export interface Proxy {
    type: TransportConfigType;
    sub_transport: TransportConfig;
    proxy_config: RemoteProxyClient | LocalProxyServer;
}
export declare enum ProxyConfigType {
    RemoteProxyClient = "remote_proxy_client",
    LocalProxyServer = "local_proxy_server"
}
export interface RemoteProxyClient {
    type: ProxyConfigType;
    proxy_url: Url2;
}
export interface LocalProxyServer {
    type: ProxyConfigType;
    proxy_accept_config?: ProxyAcceptConfig;
}
export declare enum ProxyAcceptConfig {
    AcceptAll = "accept_all",
    RejectAll = "reject_all"
}
export declare enum NetworkType {
    QuicBootstrap = "quic_bootstrap",
    QuicMdns = "quic_mdns"
}
export declare type TransportConfig = (Mem | Quic | Proxy);
export interface KitsuneP2pConfig {
    network_type: NetworkType;
    transport_pool: TransportConfig[];
    bootstrap_service?: Url2;
    tuning_params?: TuningParams;
}
export interface TuningParams {
    gossip_loop_iteration_delay_ms: number;
    default_notify_remote_agent_count: number;
    default_notify_timeout_ms: number;
    default_rpc_single_timeout_ms: number;
    default_rpc_multi_remote_agent_count: number;
    default_rpc_multi_timeout_ms: number;
    agent_info_expires_after_ms: number;
    tls_in_mem_session_storage: number;
    proxy_keepalive_ms: number;
    proxy_to_expire_ms: number;
}
export declare type KillFn = (signal?: string) => Promise<void>;
