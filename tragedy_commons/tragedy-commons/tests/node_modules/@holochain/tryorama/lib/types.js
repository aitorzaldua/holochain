"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkType = exports.ProxyAcceptConfig = exports.ProxyConfigType = exports.TransportConfigType = exports.adminWsUrl = exports.decodeOrThrow = void 0;
// import * as t from "io-ts"
const io_ts_reporters_1 = require("io-ts-reporters");
// import { ThrowReporter } from "io-ts/lib/ThrowReporter"
// import { ChildProcess } from 'child_process';
const logger_1 = __importDefault(require("./logger"));
exports.decodeOrThrow = (validator, value, extraMsg = '') => {
    const result = validator.decode(value);
    const errors = io_ts_reporters_1.reporter(result);
    if (errors.length > 0) {
        const msg = `${extraMsg ? extraMsg + '\n' : ''}Tried to use an invalid value for a complex type and found the following problems:\n    - ${errors.join("\n    - ")}`;
        logger_1.default.error(msg);
        throw new Error(msg);
    }
    return result;
};
// export type MachineConfigs = ObjectS<PlayerConfigs>
exports.adminWsUrl = ({ urlBase, port }) => `${urlBase}:${port}`;
var TransportConfigType;
(function (TransportConfigType) {
    TransportConfigType["Mem"] = "mem";
    TransportConfigType["Quic"] = "quic";
    TransportConfigType["Proxy"] = "proxy";
})(TransportConfigType = exports.TransportConfigType || (exports.TransportConfigType = {}));
var ProxyConfigType;
(function (ProxyConfigType) {
    ProxyConfigType["RemoteProxyClient"] = "remote_proxy_client";
    ProxyConfigType["LocalProxyServer"] = "local_proxy_server";
})(ProxyConfigType = exports.ProxyConfigType || (exports.ProxyConfigType = {}));
var ProxyAcceptConfig;
(function (ProxyAcceptConfig) {
    ProxyAcceptConfig["AcceptAll"] = "accept_all";
    ProxyAcceptConfig["RejectAll"] = "reject_all";
})(ProxyAcceptConfig = exports.ProxyAcceptConfig || (exports.ProxyAcceptConfig = {}));
var NetworkType;
(function (NetworkType) {
    NetworkType["QuicBootstrap"] = "quic_bootstrap";
    NetworkType["QuicMdns"] = "quic_mdns";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
//# sourceMappingURL=types.js.map