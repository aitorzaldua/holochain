/// <reference types="node" />
import { KillFn } from './types';
import * as T from './types';
import { AdminWebsocket, AppWebsocket, InstallAppRequest, InstallAppBundleRequest, ListAppsRequest, ListAppsResponse, HoloHash, AppSignal, InstalledAppInfo, AppBundleSource } from '@holochain/conductor-api';
import { Player } from './player';
import { TunneledAdminClient, TunneledAppClient } from './trycp';
export declare type CallAdminFunc = (method: string, params: Record<string, any>) => Promise<any>;
declare type ConstructorArgs = {
    player: Player;
    name: string;
    kill: (signal?: string) => Promise<void>;
    onSignal: ((signal: AppSignal) => void) | null;
    onActivity: () => void;
    backend: {
        type: 'local';
        machineHost: string;
        adminInterfacePort: number;
        appInterfacePort: number;
    } | {
        type: 'trycp';
        adminInterfaceCall: (req: any) => Promise<any>;
        appInterfaceCall: (port: number, message: any) => Promise<any>;
        connectAppInterface: (port: number) => Promise<void>;
        disconnectAppInterface: (port: number) => Promise<void>;
        subscribeAppInterfacePort: (port: number, onSignal: (signal: AppSignal) => void) => void;
        unsubscribeAppInterfacePort: (port: number) => void;
        downloadDnaRemote: (url: string) => Promise<string>;
        saveDnaRemote: (id: string, buffer_callback: () => Promise<Buffer>) => Promise<string>;
    } | {
        type: 'test';
    };
};
/**
 * Representation of a running Conductor instance.
 * A [Player] spawns a conductor process locally or remotely and constructs this class accordingly.
 * Though Conductor is spawned externally, this class is responsible for establishing WebSocket
 * connections to the various interfaces to enable zome calls as well as admin and signal handling.
 */
export declare class Conductor {
    name: string;
    logger: any;
    kill: KillFn;
    adminClient: AdminWebsocket | TunneledAdminClient | null;
    appClient: AppWebsocket | TunneledAppClient | null;
    _appInterfacePort: number | null;
    _onSignal: ((signal: AppSignal) => void) | null;
    _player: Player;
    _isInitialized: boolean;
    _onActivity: () => void;
    _timeout: number;
    _backend: {
        type: 'local';
        adminInterfacePort: number;
        appInterfacePort: number;
        machineHost: string;
    } | {
        type: 'trycp';
        appInterfaceCall: (port: number, message: any) => Promise<any>;
        connectAppInterface: (port: number) => Promise<void>;
        disconnectAppInterface: (port: number) => Promise<void>;
        subscribeAppInterfacePort: (port: number, onSignal: (signal: AppSignal) => void) => void;
        unsubscribeAppInterfacePort: (port: number) => void;
        downloadDnaRemote: (url: string) => Promise<string>;
        saveDnaRemote: (id: string, buffer_callback: () => Promise<Buffer>) => Promise<string>;
    } | {
        type: 'test';
    };
    constructor({ player, name, kill, onActivity, backend }: ConstructorArgs);
    initialize: () => Promise<void>;
    listApps: (status: ListAppsRequest) => Promise<ListAppsResponse>;
    setSignalHandler: (onSignal: ((signal: AppSignal) => void) | null) => void;
    registerDna: (source: T.DnaSource, uid?: any, properties?: any) => Promise<HoloHash>;
    installBundledHapp: (bundleSource: AppBundleSource, agentPubKey?: Buffer | undefined, installedAppId?: string | undefined, uid?: string | undefined) => Promise<T.InstalledHapp>;
    _installBundledHapp: (installAppBundleReq: InstallAppBundleRequest) => Promise<T.InstalledHapp>;
    installHapp: (agentHapp: T.DnaSrc[], agentPubKey?: Buffer | undefined) => Promise<T.InstalledHapp>;
    _installHapp: (installAppReq: InstallAppRequest) => Promise<T.InstalledHapp>;
    _makeInstalledAgentHapp: (installedAppResponse: InstalledAppInfo) => T.InstalledHapp;
    _connectInterfaces: () => Promise<void>;
}
export {};
