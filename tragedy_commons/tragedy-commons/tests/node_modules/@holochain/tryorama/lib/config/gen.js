"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigPath = exports.gen = void 0;
const T = __importStar(require("../types"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
// default networking type is for QuicBootstrap but we don't provide a
// bootstrap server, so default action discovery is explicit with shareAllNodes
const defaultCommonConfig = {
    network: {
        network_type: T.NetworkType.QuicBootstrap,
        transport_pool: [{
                type: T.TransportConfigType.Quic,
            }],
    }
};
exports.gen = (commonConfig = {}) => (args) => {
    const { configDir, adminInterfacePort, uid } = args;
    const keystorePath = path_1.default.join(configDir, 'keystore');
    // don't put any keys on this object that you want to fall back to defaults
    const specific = Object.assign(Object.assign({ environment_path: configDir, passphrase_service: {
            type: "danger_insecure_from_config",
            passphrase: "pass"
        }, keystore_path: keystorePath, admin_interfaces: [
            {
                driver: {
                    type: 'websocket',
                    port: adminInterfacePort,
                },
            },
        ], app_interfaces: [
            {
                driver: {
                    type: 'websocket',
                    port: commonConfig.appPort || 0,
                },
            },
        ] }, (commonConfig.db_sync_level ? { db_sync_level: commonConfig.db_sync_level } : {})), (commonConfig.network ? { network: commonConfig.network } : {}));
    // apply from left to right, in order of precedence
    // so this will override defaults with specifically set values
    // https://lodash.com/docs/4.17.15#merge
    return lodash_1.default.merge({}, defaultCommonConfig, specific);
};
exports.getConfigPath = (configDir) => path_1.default.join(configDir, 'conductor-config.yml');
//# sourceMappingURL=gen.js.map