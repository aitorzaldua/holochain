"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnRemote = exports.spawnLocal = exports.spawnTest = void 0;
const child_process_1 = require("child_process");
const logger_1 = __importStar(require("../logger"));
const conductor_1 = require("../conductor");
const _1 = require(".");
const env_1 = __importDefault(require("../env"));
var fs = require('fs');
exports.spawnTest = (player, {}) => __awaiter(void 0, void 0, void 0, function* () {
    return new conductor_1.Conductor({
        player,
        name: 'test-conductor',
        kill: () => __awaiter(void 0, void 0, void 0, function* () { }),
        onSignal: null,
        onActivity: () => { },
        backend: { type: "test" },
    });
});
exports.spawnLocal = (configDir, adminPort, appPort) => (player, { handleHook } = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const name = player.name;
    const configPath = _1.getConfigPath(configDir);
    let handle;
    let lairHandle;
    try {
        const lairDir = `${configDir}/keystore`;
        if (!fs.existsSync(lairDir)) {
            fs.mkdirSync(lairDir);
        }
        logger_1.default.info("Spawning lair for test with keystore at:  %s", lairDir);
        const lairBinPath = env_1.default.lairPath;
        lairHandle = yield child_process_1.spawn(lairBinPath, ["-d", lairDir], {
            env: Object.assign({ 
                // TODO: maybe put this behind a flag?
                "RUST_BACKTRACE": "1" }, process.env)
        });
        // Wait for lair to output data such as "#lair-keystore-ready#" before starting holochain
        yield new Promise((resolve) => { lairHandle.stdout.once("data", resolve); });
        const binPath = env_1.default.holochainPath;
        const version = child_process_1.execSync(`${binPath} --version`);
        logger_1.default.info("Using conductor path:  %s", binPath);
        logger_1.default.info("Holochain version:     %s", version);
        logger_1.default.info("Conductor config path: %s", configPath);
        const flag = '-c';
        logger_1.default.debug('running: %s %s %s', binPath, flag, configPath);
        handle = child_process_1.spawn(binPath, [flag, configPath], {
            env: Object.assign({ 
                // TODO: maybe put this behind a flag?
                "RUST_BACKTRACE": "1" }, process.env)
        });
        let plainLogger = logger_1.makeLogger();
        handle.stdout.on('data', data => plainLogger.info(getFancy(`[[[CONDUCTOR ${name}]]]\n${data.toString('utf8')}`)));
        handle.stderr.on('data', data => plainLogger.info(getFancy(`{{{CONDUCTOR ${name}}}}\n${data.toString('utf8')}`)));
        if (handleHook) {
            // TODO: document this
            player.logger.info('running spawned handle hack.');
            handleHook(handle);
        }
        yield awaitInterfaceReady(handle, player.name);
        const conductor = new conductor_1.Conductor({
            player,
            name,
            kill: (...args) => __awaiter(void 0, void 0, void 0, function* () {
                // wait for it to be finished off before resolving
                const conductorKillPromise = new Promise((resolve) => {
                    handle.once('close', resolve);
                });
                const lairKillPromise = new Promise((resolve) => {
                    lairHandle.once('close', resolve);
                });
                const killPromise = Promise.all([conductorKillPromise, lairKillPromise]);
                lairHandle.kill();
                handle.kill(...args);
                yield killPromise;
            }),
            onSignal: player.onSignal,
            onActivity: player.onActivity,
            backend: {
                type: "local",
                machineHost: "localhost",
                adminInterfacePort: adminPort,
                appInterfacePort: appPort || 0
            },
        });
        return conductor;
    }
    catch (err) {
        return Promise.reject(err);
    }
});
const awaitInterfaceReady = (handle, name) => new Promise((fulfill, reject) => {
    const pattern = 'Conductor ready.';
    let resolved = false;
    handle.on('close', code => {
        resolved = true;
        logger_1.default.info(`conductor '${name}' exited with code ${code}`);
        // this rejection will have no effect if the promise already resolved,
        // which happens below
        reject(`Conductor exited before starting interface (code ${code})`);
    });
    handle.stdout.on('data', data => {
        if (resolved) {
            return;
        }
        const line = data.toString('utf8');
        if (line.match(pattern)) {
            logger_1.default.info(`Conductor '${name}' process spawning completed.`);
            resolved = true;
            fulfill(null);
        }
    });
});
exports.spawnRemote = (trycp) => (player) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const name = player.name;
    const spawnResult = yield trycp.spawn(name);
    logger_1.default.debug(`TryCP spawn result: ${spawnResult}`);
    // NB: trycp currently blocks until conductor is ready. It would be nice if it instead sent a notification asynchronously when the conductor is ready.
    // logger.info('Waiting 20 seconds for remote conductor to be ready to receive websocket connections...')
    // await delay(20000)
    // logger.info('Done waiting. Ready or not, here we come, remote conductor!')
    return new conductor_1.Conductor({
        player,
        name,
        kill: (signal) => trycp.kill(name, signal),
        onSignal: (_b = (_a = player.onSignal) === null || _a === void 0 ? void 0 : _a.bind(player)) !== null && _b !== void 0 ? _b : null,
        onActivity: player.onActivity,
        backend: {
            type: "trycp",
            adminInterfaceCall: (message) => trycp.adminInterfaceCall(name, message),
            appInterfaceCall: trycp.appInterfaceCall,
            connectAppInterface: trycp.connectAppInterface,
            disconnectAppInterface: trycp.disconnectAppInterface,
            subscribeAppInterfacePort: trycp.subscribeAppInterfacePort,
            unsubscribeAppInterfacePort: trycp.unsubscribeAppInterfacePort,
            downloadDnaRemote: trycp.downloadDna,
            saveDnaRemote: trycp.saveDna,
        }
    });
});
const bullets = "☉★☯☸☮";
let currentBullet = 0;
const getFancy = (output) => {
    const bullet = bullets[currentBullet];
    currentBullet = (currentBullet + 1) % bullets.length;
    const indented = output.split('\n').join(`\n${bullet} `);
    return `\n${bullet}${bullet}${bullet} ${indented}`;
};
/**
 * Only spawn one conductor per "name", to be used for entire test suite
 * Unused.
 * TODO: disable `.kill()` and `.spawn()` in scenario API
 */
const memoizedSpawner = () => {
    const memomap = {};
    return (player, args) => {
        const name = player.name;
        if (!(name in memomap)) {
            memomap[name] = exports.spawnLocal(player, args);
        }
        return memomap[name];
    };
};
//# sourceMappingURL=spawn.js.map