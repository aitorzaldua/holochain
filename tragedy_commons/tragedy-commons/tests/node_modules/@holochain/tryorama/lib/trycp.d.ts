/// <reference types="node" />
import * as conductorApi from "@holochain/conductor-api";
export declare type TrycpClient = {
    saveDna: (id: string, contents: () => Promise<Buffer>) => Promise<string>;
    downloadDna: (url: string) => Promise<string>;
    configurePlayer: (id: any, partial_config: any) => Promise<void>;
    spawn: (id: any) => Promise<void>;
    kill: (id: any, signal?: any) => Promise<void>;
    reset: () => Promise<void>;
    adminInterfaceCall: (id: any, message: any) => Promise<any>;
    appInterfaceCall: (port: any, message: any) => Promise<any>;
    connectAppInterface: (port: number) => Promise<void>;
    disconnectAppInterface: (port: number) => Promise<void>;
    subscribeAppInterfacePort: (port: number, onSignal: (signal: conductorApi.AppSignal) => void) => void;
    unsubscribeAppInterfacePort: (port: number) => void;
    closeSession: () => Promise<void>;
};
export declare const trycpSession: (machineEndpoint: string) => Promise<TrycpClient>;
export declare class TunneledAdminClient {
    client: {
        close: () => Promise<void>;
    };
    private adminInterfaceCall;
    constructor(adminInterfaceCall: (any: any) => Promise<any>);
    enableApp(data: conductorApi.EnableAppRequest): Promise<conductorApi.EnableAppResponse>;
    addAgentInfo(data: conductorApi.AddAgentInfoRequest): Promise<conductorApi.AddAgentInfoResponse>;
    attachAppInterface(data: conductorApi.AttachAppInterfaceRequest): Promise<conductorApi.AttachAppInterfaceResponse>;
    disableApp(data: conductorApi.DisableAppRequest): Promise<conductorApi.DisableAppResponse>;
    dumpState(data: conductorApi.DumpStateRequest): Promise<conductorApi.DumpStateResponse>;
    generateAgentPubKey(): Promise<conductorApi.GenerateAgentPubKeyResponse>;
    installApp(data: conductorApi.InstallAppRequest): Promise<conductorApi.InstallAppResponse>;
    installAppBundle(data: conductorApi.InstallAppBundleRequest): Promise<conductorApi.InstallAppBundleResponse>;
    listApps(data: conductorApi.ListAppsRequest): Promise<conductorApi.ListAppsResponse>;
    listActiveApps(): Promise<conductorApi.ListActiveAppsResponse>;
    listCellIds(): Promise<conductorApi.ListCellIdsResponse>;
    listDnas(): Promise<conductorApi.ListDnasResponse>;
    registerDna(data: conductorApi.RegisterDnaRequest): Promise<conductorApi.RegisterDnaResponse>;
    requestAgentInfo(data: conductorApi.RequestAgentInfoRequest): Promise<conductorApi.RequestAgentInfoResponse>;
    startApp(data: conductorApi.StartAppRequest): Promise<conductorApi.StartAppResponse>;
}
export declare class TunneledAppClient {
    client: {
        close: () => Promise<void>;
    };
    private appInterfaceCall;
    private disconnectAppInterface;
    constructor(appInterfaceCall: (req: any) => Promise<any>, disconnectAppInterface: () => Promise<void>);
    private close;
    appInfo(data: conductorApi.AppInfoRequest): Promise<conductorApi.AppInfoResponse>;
    callZome(data: conductorApi.CallZomeRequest): Promise<conductorApi.CallZomeResponse>;
}
