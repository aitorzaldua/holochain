import * as _ from 'lodash';
import { Observation, NodeId } from './elements';
import { NetworkModel, ObservedEvents, ObservedEventsArray } from './network';
import { CallbackData, TimedCallback } from './callback';
declare type InstrumentedObservation = {
    observation: Observation;
    stats: {
        timestamp: number;
    };
};
declare type TimeoutSettings = {
    softDuration: number;
    hardDuration: number;
    strict: boolean;
};
export declare type WaiterOptions = {
    softTimeout?: number;
    hardTimeout?: number;
    strict?: boolean;
};
export declare type NetworkMap = {
    [name: string]: NetworkModel;
};
export declare class Waiter {
    networks: NetworkMap;
    networkModelClass: any;
    complete: Promise<null>;
    callbacks: Array<TimedCallback>;
    timeoutSettings: TimeoutSettings;
    completedObservations: Array<InstrumentedObservation>;
    constructor(networkModelClass: any, initialNetworks?: NetworkMap, opts?: WaiterOptions);
    addNode(networkName: string, nodeId: NodeId): void;
    removeNode(networkName: string, nodeId: NodeId): void;
    totalEventsAwaiting(): number;
    eventsAwaiting(): Record<NodeId, ObservedEvents>;
    eventsAwaitingArray(): Record<NodeId, ObservedEventsArray>;
    ignoreAllPending(): void;
    registerCallback(cb: CallbackData): TimedCallback;
    handleObservation(o: Observation): void;
    _totalPendingByCallbackId(): _.Dictionary<number>;
    _checkCompletion(pendingBefore: any): void;
}
export {};
