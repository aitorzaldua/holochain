export declare type Entry = {};
export declare type Event = string;
export declare type NodeId = string;
export declare type DnaId = string;
export declare type NodeConfig = {
    id: NodeId;
    dna: DnaId;
};
export declare type Signal = {
    event: Event;
    pending: Array<EffectAbstract>;
};
/**
 * A Signal emitted from a Node
 */
export declare type Observation = {
    dna: DnaId;
    node: NodeId;
    signal: Signal;
};
/**
 * A representation of a matcher for the effect of a Cause,
 * abstracted away from any particular network
 */
export declare type EffectAbstract = {
    event: Event;
    group: EffectGroup;
};
/**
 * A representation of a matcher for the effect of a Cause,
 * as viewed by a particular node
 */
export declare type EffectConcrete = {
    event: Event;
    sourceNode: NodeId;
    targetNode: NodeId;
};
/**
 * Specifies which group of agents the Effect affects
 * - Source: The node who produced the corresponding Cause
 * - Validators: All validators associated with the Cause
 */
export declare enum EffectGroup {
    Source = "Source",
    Validators = "Validators"
}
